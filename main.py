import sqlite3
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.textinput import TextInput
from kivy.uix.label import Label
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.core.window import Window
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import cm

# –§–æ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
Window.clearcolor = (0.95, 0.95, 0.95, 1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
conn = sqlite3.connect("finance.db")
cursor = conn.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS operations (
                    id INTEGER PRIMARY KEY, 
                    type TEXT, 
                    amount REAL, 
                    category TEXT)""")
conn.commit()


# –ö—Ä–∞—Å–∏–≤—ã–µ –∫–Ω–æ–ø–∫–∏
def styled_button(text, color=(0.2, 0.6, 0.9, 1)):
    return Button(
        text=text,
        size_hint=(1, 0.2),
        background_normal='',
        background_color=color,
        color=(1, 1, 1, 1),
        font_size=18
    )


# –≠–∫—Ä–∞–Ω –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
class MenuScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation="vertical", spacing=15, padding=25)

        btn_income = styled_button("–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥", (0.2, 0.7, 0.3, 1))
        btn_income.bind(on_press=lambda x: setattr(self.manager, 'current', "add_income"))

        btn_expense = styled_button("–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", (0.9, 0.3, 0.3, 1))
        btn_expense.bind(on_press=lambda x: setattr(self.manager, 'current', "add_expense"))

        btn_stats = styled_button("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", (0.3, 0.5, 0.9, 1))
        btn_stats.bind(on_press=lambda x: self.manager.get_screen("statistics").show_chart())

        btn_clear = styled_button("–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", (0.5, 0.5, 0.5, 1))
        btn_clear.bind(on_press=self.clear_data)

        layout.add_widget(Label(text="–£–ß–Å–¢ –§–ò–ù–ê–ù–°–û–í", font_size=28, bold=True, size_hint=(1, 0.2), color=(0, 0, 0, 1)))
        layout.add_widget(btn_income)
        layout.add_widget(btn_expense)
        layout.add_widget(btn_stats)
        layout.add_widget(btn_clear)
        self.add_widget(layout)

    def clear_data(self, instance):
        cursor.execute("DELETE FROM operations")
        conn.commit()
        print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞")


# –≠–∫—Ä–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞
class AddIncomeScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation="vertical", spacing=15, padding=25)

        self.amount = TextInput(hint_text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É", multiline=False, input_filter='float', font_size=18)
        self.category = TextInput(hint_text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", multiline=False, font_size=18)
        save_btn = styled_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", (0.2, 0.7, 0.3, 1))
        save_btn.bind(on_press=self.save_income)
        back_btn = styled_button("‚¨Ö –ù–∞–∑–∞–¥", (0.5, 0.5, 0.5, 1))
        back_btn.bind(on_press=lambda x: setattr(self.manager, 'current', "menu"))

        layout.add_widget(Label(text="–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥", font_size=24, size_hint=(1, 0.2), color=(0, 0, 0, 1)))
        layout.add_widget(self.amount)
        layout.add_widget(self.category)
        layout.add_widget(save_btn)
        layout.add_widget(back_btn)
        self.add_widget(layout)

    def save_income(self, instance):
        if self.amount.text and self.category.text:
            cursor.execute("INSERT INTO operations (type, amount, category) VALUES (?, ?, ?)",
                           ("income", float(self.amount.text), self.category.text))
            conn.commit()
            self.manager.current = "menu"
            self.amount.text = ""
            self.category.text = ""


# –≠–∫—Ä–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
class AddExpenseScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation="vertical", spacing=15, padding=25)

        self.amount = TextInput(hint_text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É", multiline=False, input_filter='float', font_size=18)
        self.category = TextInput(hint_text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", multiline=False, font_size=18)
        save_btn = styled_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", (0.9, 0.3, 0.3, 1))
        save_btn.bind(on_press=self.save_expense)
        back_btn = styled_button("‚¨Ö –ù–∞–∑–∞–¥", (0.5, 0.5, 0.5, 1))
        back_btn.bind(on_press=lambda x: setattr(self.manager, 'current', "menu"))

        layout.add_widget(Label(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", font_size=24, size_hint=(1, 0.2), color=(0, 0, 0, 1)))
        layout.add_widget(self.amount)
        layout.add_widget(self.category)
        layout.add_widget(save_btn)
        layout.add_widget(back_btn)
        self.add_widget(layout)

    def save_expense(self, instance):
        if self.amount.text and self.category.text:
            cursor.execute("INSERT INTO operations (type, amount, category) VALUES (?, ?, ?)",
                           ("expense", float(self.amount.text), self.category.text))
            conn.commit()
            self.manager.current = "menu"
            self.amount.text = ""
            self.category.text = ""


# –≠–∫—Ä–∞–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
class StatisticsScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    def show_chart(self):
        cursor.execute("SELECT category, SUM(amount) FROM operations WHERE type='income' GROUP BY category")
        income_data = cursor.fetchall()
        cursor.execute("SELECT category, SUM(amount) FROM operations WHERE type='expense' GROUP BY category")
        expense_data = cursor.fetchall()

        income_values = [c[1] for c in income_data]
        income_categories = [c[0] for c in income_data]
        expense_values = [c[1] for c in expense_data]
        expense_categories = [c[0] for c in expense_data]

        positions = [0, 1]  # 0 = –¥–æ—Ö–æ–¥—ã, 1 = —Ä–∞—Å—Ö–æ–¥—ã
        bottom = [0, 0]

        plt.figure(figsize=(7, 6))
        colors_list = [cm.viridis, cm.plasma]

        # –†–∏—Å—É–µ–º —Å—Ç–æ–ª–±—Ü—ã
        for col in range(2):
            values = income_values if col == 0 else expense_values
            labels = income_categories if col == 0 else expense_categories
            colors = colors_list[col](np.linspace(0, 1, len(values))) if values else []
            for i, val in enumerate(values):
                plt.bar(positions[col], val, bottom=bottom[col], color=colors[i])
                plt.text(positions[col], bottom[col] + val / 2,
                         f"{labels[i]}: {val:.2f}",
                         ha='center', va='center',
                         color='black', fontsize=9, fontweight='bold')
                bottom[col] += val

        plt.xticks(positions, ['–î–æ—Ö–æ–¥—ã', '–†–∞—Å—Ö–æ–¥—ã'], fontsize=12)
        plt.ylabel("–°—É–º–º–∞", fontsize=12)
        plt.title("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", fontsize=14, fontweight="bold")

        # –ò—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã
        total_income = sum(income_values)
        total_expense = sum(expense_values)
        plt.text(0, bottom[0] + max(bottom)*0.05, f"–í—Å–µ–≥–æ: {total_income:.2f}", ha='center', va='bottom', fontsize=10, color='black', fontweight='bold')
        plt.text(1, bottom[1] + max(bottom)*0.05, f"–í—Å–µ–≥–æ: {total_expense:.2f}", ha='center', va='bottom', fontsize=10, color='black', fontweight='bold')

        plt.tight_layout()
        plt.show()



# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
class FinanceApp(App):
    def build(self):
        sm = ScreenManager()
        sm.add_widget(MenuScreen(name="menu"))
        sm.add_widget(AddIncomeScreen(name="add_income"))
        sm.add_widget(AddExpenseScreen(name="add_expense"))
        sm.add_widget(StatisticsScreen(name="statistics"))
        return sm


if __name__ == "__main__":
    FinanceApp().run()
